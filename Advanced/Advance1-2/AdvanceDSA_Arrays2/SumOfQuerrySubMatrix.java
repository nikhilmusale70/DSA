package AdvanceDSA_Arrays2;

import adv12Utils.ScaUtils;

public class SumOfQuerrySubMatrix {
    public static void main(String[] args) {
        int num = 999999470;
        System.out.println(num+1);
        int[][] A = {
                {45, 33, 29, 87, 45, 66, 32, 30, 75, 92, 56, 64, 94, 82, 11, 53, 74, 78, 100, 22, 2, 3, 85, 1, 23, 32, 2, 38, 47},
                {17, 69, 76, 5, 48, 61, 70, 91, 96, 9, 34, 22, 74, 50, 54, 79, 24, 9, 60, 28, 32, 17, 88, 10, 48, 72, 15, 93, 8},
                {40, 31, 6, 99, 44, 12, 51, 73, 40, 3, 58, 52, 81, 1, 2, 14, 85, 61, 5, 38, 75, 76, 61, 98, 33, 87, 89, 18, 12},
                {28, 87, 2, 99, 22, 88, 85, 49, 100, 26, 73, 45, 18, 19, 53, 16, 36, 50, 5, 15, 4, 60, 51, 11, 19, 90, 50, 89, 83},
                {42, 33, 22, 36, 71, 89, 10, 2, 4, 59, 89, 25, 17, 48, 5, 71, 4, 27, 16, 85, 85, 17, 20, 20, 52, 51, 66, 60, 23},
                {17, 27, 9, 80, 11, 22, 16, 89, 24, 76, 50, 87, 29, 90, 89, 59, 37, 100, 89, 11, 39, 60, 65, 12, 55, 8, 61, 24, 62},
                {81, 5, 82, 1, 96, 30, 46, 2, 99, 60, 99, 7, 88, 53, 26, 17, 60, 7, 71, 38, 81, 44, 41, 42, 87, 11, 72, 37, 38},
                {33, 99, 61, 79, 9, 43, 10, 82, 29, 64, 57, 90, 46, 12, 76, 65, 48, 20, 85, 85, 28, 6, 58, 11, 59, 57, 55, 89, 62},
                {98, 1, 77, 47, 44, 5, 67, 2, 11, 19, 73, 20, 7, 11, 98, 22, 79, 23, 18, 93, 50, 75, 48, 83, 42, 86, 45, 26, 70},
                {61, 38, 59, 6, 30, 79, 5, 60, 89, 63, 58, 10, 54, 37, 87, 3, 4, 27, 30, 86, 39, 39, 58, 94, 83, 72, 56, 82, 91},
                {19, 61, 52, 39, 34, 77, 7, 12, 80, 2, 4, 32, 60, 74, 7, 7, 35, 47, 49, 14, 43, 39, 80, 78, 20, 47, 45, 52, 84},
                {85, 90, 47, 76, 76, 65, 10, 81, 73, 48, 17, 33, 62, 23, 84, 96, 79, 53, 72, 51, 34, 65, 27, 61, 16, 20, 53, 87, 41},
                {73, 96, 14, 76, 46, 79, 8, 83, 28, 18, 84, 69, 71, 4, 58, 88, 27, 57, 70, 72, 52, 1, 54, 17, 64, 20, 59, 15, 57},
                {48, 71, 64, 1, 40, 9, 59, 31, 41, 30, 14, 97, 29, 77, 54, 7, 46, 17, 50, 77, 85, 64, 79, 62, 96, 80, 30, 49, 80},
                {12, 90, 29, 68, 93, 81, 8, 96, 77, 52, 30, 9, 77, 76, 81, 61, 68, 13, 85, 91, 19, 88, 5, 4, 4, 37, 6, 15, 41},
                {44, 40, 42, 55, 42, 90, 98, 82, 15, 60, 55, 57, 65, 68, 9, 20, 22, 69, 32, 16, 75, 72, 38, 48, 43, 48, 66, 39, 7},
                {23, 12, 57, 47, 15, 51, 71, 79, 60, 100, 13, 90, 62, 9, 10, 17, 65, 63, 20, 54, 99, 36, 28, 99, 36, 42, 13, 15, 24},
                {63, 45, 4, 34, 97, 19, 60, 90, 54, 100, 9, 3, 31, 74, 100, 39, 94, 35, 84, 17, 63, 92, 46, 38, 51, 89, 72, 34, 45},
                {27, 41, 17, 94, 59, 58, 40, 20, 68, 73, 11, 12, 79, 54, 24, 81, 54, 5, 39, 63, 17, 71, 8, 72, 5, 96, 92, 57, 2},
                {39, 27, 29, 9, 8, 96, 42, 30, 100, 38, 84, 7, 12, 79, 41, 2, 96, 98, 46, 60, 49, 63, 82, 93, 13, 37, 41, 4, 1},
                {45, 96, 72, 56, 17, 99, 13, 76, 55, 82, 4, 70, 69, 81, 31, 18, 100, 75, 5, 36, 20, 14, 54, 100, 16, 47, 43, 90, 76},
                {68, 53, 55, 15, 41, 99, 68, 11, 84, 77, 41, 83, 19, 27, 53, 84, 52, 92, 68, 52, 55, 83, 87, 81, 87, 22, 26, 90, 32},
                {11, 80, 55, 60, 7, 76, 44, 5, 3, 13, 8, 68, 4, 14, 50, 39, 75, 36, 41, 73, 74, 10, 91, 44, 22, 93, 68, 23, 58},
                {81, 65, 59, 46, 25, 67, 40, 12, 54, 4, 62, 77, 47, 16, 49, 62, 25, 28, 98, 13, 94, 25, 70, 11, 23, 64, 66, 62, 65},
                {90, 1, 85, 31, 41, 93, 72, 35, 99, 67, 19, 31, 32, 100, 58, 5, 83, 10, 13, 59, 31, 26, 71, 100, 92, 46, 14, 7, 65},
                {68, 86, 50, 31, 13, 94, 93, 87, 63, 79, 5, 93, 84, 38, 94, 95, 100, 25, 68, 71, 33, 65, 9, 81, 61, 54, 57, 38, 54},
                {31, 95, 4, 14, 30, 20, 23, 84, 3, 6, 25, 5, 43, 63, 22, 95, 4, 6, 71, 34, 29, 77, 34, 23, 48, 57, 2, 8, 69},
                {62, 94, 72, 32, 92, 6, 94, 19, 88, 48, 15, 56, 24, 34, 38, 66, 43, 5, 59, 76, 54, 60, 97, 36, 53, 39, 63, 20, 84},
                {31, 19, 83, 85, 46, 20, 19, 35, 30, 67, 30, 49, 66, 43, 29, 34, 73, 52, 48, 80, 31, 16, 54, 23, 21, 52, 6, 57, 99},
                {98, 90, 97, 66, 6, 2, 83, 78, 97, 57, 83, 22, 22, 78, 47, 61, 44, 79, 4, 42, 36, 79, 36, 24, 36, 30, 97, 31, 12},
                {88, 63, 41, 35, 72, 87, 29, 68, 77, 32, 45, 37, 31, 27, 88, 68, 31, 63, 23, 41, 99, 45, 59, 16, 55, 42, 17, 91, 59},
                {85, 69, 38, 50, 63, 90, 77, 67, 14, 57, 54, 34, 87, 65, 100, 37, 30, 84, 53, 42, 33, 43, 52, 17, 13, 60, 31, 22, 72},
                {66, 55, 51, 70, 29, 69, 23, 96, 87, 72, 56, 5, 19, 41, 32, 66, 39, 80, 82, 90, 49, 94, 13, 86, 42, 54, 6, 19, 33},
                {27, 44, 43, 80, 26, 95, 85, 53, 71, 77, 1, 21, 100, 38, 94, 61, 48, 42, 62, 95, 41, 24, 24, 44, 49, 83, 15, 24, 79},
                {25, 81, 71, 76, 100, 29, 75, 77, 6, 11, 93, 14, 22, 93, 1, 72, 74, 73, 67, 61, 50, 75, 61, 81, 26, 84, 31, 4, 38},
                {61, 45, 25, 82, 88, 49, 21, 94, 20, 60, 25, 95, 5, 93, 77, 29, 71, 36, 63, 69, 76, 53, 100, 93, 69, 53, 15, 45, 94},
                {68, 83, 50, 33, 21, 7, 30, 93, 28, 51, 5, 80, 44, 36, 64, 49, 5, 69, 85, 40, 53, 65, 73, 85, 86, 94, 8, 64, 4},
                {87, 36, 12, 31, 94, 34, 50, 52, 16, 73, 38, 89, 90, 54, 58, 64, 43, 30, 22, 19, 84, 59, 71, 35, 68, 8, 57, 20, 93},
                {20, 37, 99, 6, 88, 16, 65, 89, 42, 1, 69, 15, 15, 91, 79, 21, 92, 97, 49, 95, 68, 7, 24, 80, 9, 72, 84, 63, 24},
                {89, 67, 1, 40, 64, 50, 8, 82, 21, 51, 53, 68, 42, 15, 58, 18, 18, 97, 33, 25, 90, 95, 35, 86, 9, 97, 73, 3, 98},
                {7, 77, 70, 92, 88, 33, 2, 73, 92, 41, 73, 11, 11, 20, 90, 7, 43, 29, 96, 76, 93, 88, 54, 50, 76, 94, 16, 8, 8},
                {74, 68, 74, 34, 18, 1, 99, 6, 96, 16, 33, 98, 75, 5, 8, 26, 11, 29, 52, 42, 11, 29, 34, 2, 16, 40, 5, 76, 17},
                {42, 36, 59, 32, 65, 53, 53, 66, 6, 98, 54, 100, 45, 61, 26, 40, 36, 53, 83, 99, 35, 18, 90, 77, 100, 14, 92, 40, 3},
                {18, 46, 9, 40, 75, 44, 14, 87, 88, 75, 69, 57, 88, 33, 91, 18, 58, 90, 87, 2, 24, 52, 97, 1, 24, 27, 10, 64, 60},
                {49, 17, 37, 43, 86, 12, 52, 81, 32, 8, 87, 41, 19, 78, 89, 60, 12, 7, 54, 67, 51, 72, 100, 69, 81, 73, 1, 83, 57},
                {42, 39, 36, 76, 11, 50, 85, 49, 1, 81, 36, 80, 47, 24, 11, 31, 99, 3, 1, 38, 59, 20, 60, 40, 70, 97, 72, 17, 88}
        };

        int[] B = { 14, 12, 7, 7, 18, 13, 6, 18, 1, 33, 4, 7, 11, 16, 27, 9, 4, 8, 25, 25, 11, 34, 21, 6, 20, 1, 4, 16, 19 };
        int[] C = { 18, 8, 9, 11, 6, 4, 17, 7, 3, 1, 2, 13, 19, 4, 20, 8, 6, 1, 13, 1, 2, 25, 25, 11, 1, 23, 14, 18, 19 };
        int[] D = { 18, 35, 11, 12, 30, 39, 40, 19, 3, 37, 37, 44, 43, 30, 29, 17, 37, 29, 34, 41, 14, 38, 45, 30, 41, 24, 14, 29, 20 };
        int[] E = { 20, 19, 24, 22, 19, 4, 28, 13, 16, 9, 23, 13, 28, 21, 21, 21, 14, 18, 28, 4, 4, 27, 27, 14, 29, 25, 19, 28, 20 };


        ScaUtils.printNormalArray(solve(A,B,C,D,E));

    }

    public static int[] solve(int[][] A, int[] B, int[] C, int[] D, int[] E) {
        int[] res = new int[B.length];
        A = construct2dPrefixMatrix(A);

        int sum=0;
        int mod = 1000000007;

        for(int i=0; i<B.length; i++){
            int x1 = B[i]-1, y1 = C[i]-1, x2 = D[i]-1, y2 = E[i]-1;
            long ans = A[x2][y2];

            if(y1-1 >= 0){
                ans -= A[x2][y1-1];
            }
            if(x1 -1 >= 0){
                ans -= A[x1-1][y2];
            }
            if(x1-1 >=0 && y1 -1 >= 0){
                ans += A[x1-1][y1-1];
            }
            while(ans < 0){
                ans += mod; // (a-b)% m = (a % m- b % m + m) % m
            }

            ans = ans % mod;
            res[i] = (int)ans;
        }

        return res;

    }
    public static int[][] construct2dPrefixMatrix(int[][] A) {
        int mod = 1000000007;
        //row
        for (int i = 0; i < A.length; i++) {
            for (int j = 1; j < A[i].length; j++) {
                A[i][j] = (A[i][j] % mod + A[i][j - 1] % mod) % mod;
//                A[i][j]%=mod;
            }
        }
        //col
        for (int i = 1; i < A.length; i++) {
            for (int j = 0; j < A[i].length; j++) {
                A[i][j] = (A[i][j] % mod + A[i - 1][j] % mod) % mod;
//                A[i][j]%=mod;
            }
        }

        return A;
    }
}
